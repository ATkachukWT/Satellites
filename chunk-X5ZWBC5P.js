import{a as D}from"./chunk-CVX4TQC2.js";import{a as v}from"./chunk-2U44WK2Y.js";import{a as g}from"./chunk-JUMM5VTE.js";import{a as y,b as u}from"./chunk-IVNI3YPA.js";import{M as w,e as m}from"./chunk-3HPBQSX2.js";import"./chunk-QGGZPZNN.js";import"./chunk-26JWDTE3.js";import"./chunk-GPDZGV7G.js";import"./chunk-BSSTF6JG.js";import"./chunk-BPX3YT3K.js";import"./chunk-QCZ3ZIGQ.js";import"./chunk-NNX76JDG.js";import"./chunk-76O2P2CB.js";import"./chunk-KBDKZSTB.js";import"./chunk-YQGS4EZO.js";import"./chunk-PMVQ5DJK.js";import"./chunk-DVBZA6ZU.js";import"./chunk-6YRWGF73.js";import"./chunk-V2JYXY4D.js";import"./chunk-LXFQWIWE.js";import"./chunk-QT6UNBJP.js";import"./chunk-V2GNNIXD.js";import"./chunk-NSYL2RQJ.js";import"./chunk-MWSXMSWY.js";import"./chunk-JRCKELO6.js";import"./chunk-ZVCMULXF.js";import"./chunk-KJULKTB5.js";import"./chunk-LACL4BQ2.js";import"./chunk-YR2HD3ZC.js";import"./chunk-GJASVPF6.js";import"./chunk-UBFCO3DV.js";import"./chunk-NI7FJV5X.js";import"./chunk-XZIOXVVJ.js";import"./chunk-LFH24RLM.js";import"./chunk-Z5Q7KLA4.js";import"./chunk-X4LNX4BR.js";import"./chunk-4XZ6X7MQ.js";import"./chunk-WLHY3MMA.js";import"./chunk-KGVXGH6H.js";import"./chunk-ARRCN5K3.js";import"./chunk-LXQPIAN7.js";import"./chunk-FTDD7QBB.js";import"./chunk-DB3UIQCU.js";import"./chunk-SBHKMV3P.js";import"./chunk-R4A63S45.js";import"./chunk-ETE32IYO.js";import"./chunk-ONUGDWDK.js";import"./chunk-SG7CQU4O.js";import{H as n}from"./chunk-QHVIRF5H.js";import{I as h}from"./chunk-WZDN6K3C.js";import{a as s}from"./chunk-QGVBCWUY.js";import"./chunk-OJQ73TPF.js";import"./chunk-354SCPDU.js";import"./chunk-OVHPPCBL.js";import"./chunk-IYZFKXJ6.js";import{f as p,x as f}from"./chunk-CKJ56T2Q.js";import"./chunk-SNFOAZZQ.js";import"./chunk-F6JAWRPN.js";import{r as c,t as d}from"./chunk-UHRSAPGQ.js";import"./chunk-V76GWARL.js";import"./chunk-N2WTMF3X.js";var t=class extends D(v(g)){constructor(){super(...arguments),this.type="elevation-3d"}get tileInfo(){return this.layer.tileInfo}initialize(){let e=this.view,r=e.map?.allLayers,o=r&&r.includes(this.layer),i=e.map?.ground?.layers,l=i&&i.includes(this.layer);if(o&&!l){let a=new d("layerview:elevation-layer-only",`3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);this.addResolvingPromise(Promise.reject(a))}this._lercDecoder=u(e.resourceController),this._addTilingSchemeMatchPromise()}destroy(){this._lercDecoder=p(this._lercDecoder)}async fetchTile(e,r){let o=this.layer;if(w(o)){let T=await o.fetchTile(e[0],e[1],e[2],{noDataValue:m,signal:r.signal});return f(r)?void c.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."):T}let i=this.getTileUrl(e),l=await r.requester.request(i,"binary",r),a=await this._lercDecoder.decode(l,{noDataValue:m},r.signal);if(a)return new y(a);throw new Error("LERC decoding failed")}};s([n()],t.prototype,"layer",void 0),s([n()],t.prototype,"tileInfo",null),t=s([h("esri.views.3d.layers.ElevationLayerView3D")],t);var N=t;export{N as default};
