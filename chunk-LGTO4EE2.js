import{t as b}from"./chunk-UHRSAPGQ.js";import"./chunk-V76GWARL.js";import{a as c,b as p}from"./chunk-N2WTMF3X.js";function g(o,a){let t=a.responseType;t?t!=="array-buffer"&&t!=="blob"&&t!=="json"&&t!=="native"&&t!=="native-request-init"&&t!=="text"&&(t="text"):t="json",a.responseType=t;let f=a.signal;return delete a.signal,globalThis.invokeStaticMessage("request",{url:o,options:a},{signal:f}).then(async e=>{let n,s,l,u,r;if(e.data)if(e.data instanceof ArrayBuffer){if(!(t!=="json"&&t!=="text"&&t!=="blob"||(n=new Blob([e.data]),t!=="json"&&t!=="text"||(u=await n.text(),t!=="json")))){try{s=JSON.parse(u||null)}catch(i){let d=p(c({},i),{url:o,requestOptions:a});throw new b("request:server",i.message,d)}if(s.error){let i=p(c({},s.error),{url:o,requestOptions:a});throw new b("request:server",s.error.message,i)}}}else t==="native"&&(e.data.signal=f,l=await fetch(e.data.url,e.data),e.httpStatus=l.status);switch(t){case"blob":r=n;break;case"json":r=s;break;case"native":r=l;break;case"text":r=u;break;default:r=e.data}return{data:r,httpStatus:e.httpStatus,requestOptions:a,ssl:e.ssl,url:o}})}export{g as execute};
