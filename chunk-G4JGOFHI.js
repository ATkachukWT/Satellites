import{a as se,b as re,c as te,d as oe,e as ae,f as ne,g as ie,h as x,i as ce,l as le}from"./chunk-NEHEP3WK.js";import{a as Z,b as ee}from"./chunk-6BEUZCEE.js";import{a as S,b as E,d as Q,f as X,g as Y}from"./chunk-JLZ3J622.js";import"./chunk-IRO4K544.js";import"./chunk-KOUNUVF6.js";import"./chunk-PHODKV66.js";import"./chunk-JPMGMA4B.js";import{c as G,d as W,g as J,k as K,l as V}from"./chunk-SIMI7FRM.js";import"./chunk-ALWV3RJ2.js";import"./chunk-DEH76MSI.js";import"./chunk-6B5XFA6F.js";import"./chunk-ZTOZWLEE.js";import"./chunk-NMLYCCKN.js";import"./chunk-RSDQHAJX.js";import"./chunk-BOVYXYHK.js";import"./chunk-QT6UNBJP.js";import{b as $}from"./chunk-SLAWDKDA.js";import"./chunk-Z5Q7KLA4.js";import"./chunk-X4LNX4BR.js";import{a as H}from"./chunk-4XZ6X7MQ.js";import"./chunk-WLHY3MMA.js";import"./chunk-KGVXGH6H.js";import"./chunk-ARRCN5K3.js";import"./chunk-DB3UIQCU.js";import"./chunk-SBHKMV3P.js";import"./chunk-R4A63S45.js";import{E as p,w as L}from"./chunk-ETE32IYO.js";import{V as z,w as f}from"./chunk-ONUGDWDK.js";import"./chunk-SG7CQU4O.js";import"./chunk-QHVIRF5H.js";import{i as q}from"./chunk-WZDN6K3C.js";import"./chunk-QGVBCWUY.js";import"./chunk-OJQ73TPF.js";import"./chunk-354SCPDU.js";import"./chunk-OVHPPCBL.js";import"./chunk-IYZFKXJ6.js";import{J as B,j as O,v as c,y as _}from"./chunk-CKJ56T2Q.js";import{a as I}from"./chunk-SNFOAZZQ.js";import"./chunk-F6JAWRPN.js";import{r as R}from"./chunk-UHRSAPGQ.js";import{a as T}from"./chunk-V76GWARL.js";import{a as y,b as P}from"./chunk-N2WTMF3X.js";var v={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function w(r,e=t=>{},s){return new j(r,e,s)}var j=class{constructor(e,s=o=>{},t){if(this.onProgress=s,this.taskName=t,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let o=0;o<e;o++){let a=o,n=1/e;this._weights[a]=n,this._progressMap.set(a,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(let[s,t]of this._progressMap.entries())e+=t*this._weights[s];if(e===1&&T("enable-feature:esri-3dofl-upload-timings")){let s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(let[t,o]of this._timingsMap){let a=Math.round(o.end-o.start)/1e3,n=Math.round(a/s*100);console.log(this.taskName??"Task",{stepKey:t,stepTime:a,relativeTime:n})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),T("enable-feature:esri-3dofl-upload-timings")){let t=performance.now();this._startTime??=t;let o=q(this._timingsMap,e,()=>({start:t,end:0}));s===1&&(o.end=t)}this.emitProgress()}simulate(e,s){return N(t=>this.setProgress(e,t),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function N(r=s=>{},e=Ue){let s=performance.now();r(0);let t=setInterval(()=>{let o=performance.now()-s,a=1-Math.exp(-o/e);r(a)},Ne);return O(()=>{clearInterval(t),r(1)})}function pe(r,e=xe){return I(r*me/e)}function ue(r,e=je){return I(r*me/e)}var xe=10,je=10,me=8e-6,Ne=50,Ue=1e3;var de=1e6,fe=20*de,De=2e9,ke=3;async function ge({data:r,name:e,description:s},t,o){let a=null;try{let n=f(t,"uploads"),i=f(n,"info"),{data:u}=await p(i,{query:{f:"json"},responseType:"json"});c(o);let g=L(t),h=u.maxUploadFileSize*de,d=g?De:h,l=g?Math.min(fe,h):fe;if(r.size>d)throw new Error("Data too large");let Te=f(n,"register"),{data:U}=await p(Te,{query:{f:"json",itemName:Ce(e),description:s},responseType:"json",method:"post"});if(c(o),!U.success)throw new Error("Registration failed");let{itemID:be}=U.item;a=f(n,be);let Ae=f(a,"uploadPart"),D=Math.ceil(r.size/l),b=new Array;for(let m=0;m<D;++m)b.push(r.slice(m*l,Math.min((m+1)*l,r.size)));let A=b.slice().reverse(),k=new Array,Fe=w(D,o?.onProgress,"uploadItem"),Me=async()=>{for(;A.length!==0;){let m=b.length-A.length,F=A.pop(),M=new FormData,Ie=Fe.simulate(m,pe(F.size));try{M.append("f","json"),M.append("file",F),M.append("partId",`${m}`);let{data:Se}=await p(Ae,{timeout:0,body:M,responseType:"json",method:"post"});if(c(o),!Se.success)throw new Error("Part upload failed")}finally{Ie.remove()}}};for(let m=0;m<ke&&A.length!==0;++m)k.push(Me());await Promise.all(k);let ve=f(a,"commit"),{data:C}=await p(ve,{query:{f:"json",parts:b.map((m,F)=>F).join(",")},responseType:"json",method:"post"});if(c(o),!C.success)throw new Error("Commit failed");return C.item}catch(n){if(a!=null){let i=f(a,"delete");await p(i,{query:{f:"json"},responseType:"json",method:"post"})}throw n}}function Ce(r){return r.replaceAll("/","_").replaceAll("\\","_")}async function Us(r,e,s){let t=r.length;if(!t)return s?.onProgress?.(1),[];let o=w(t,s?.onProgress,"uploadAssets");return Promise.all(r.map((a,n)=>Re(a,e,P(y({},s),{onProgress:o.makeOnProgress(n)}))))}async function Re(r,{layer:e,ongoingUploads:s},t){let o=s.get(r);if(o)return o;if(!es(e))throw new se;if(Oe(r,e))return t?.onProgress?.(1),r;let a=_e(r,e,t);s.set(r,a);try{await a}finally{s.delete(r)}return r}function Oe(r,e){let{parsedUrl:s}=e;return s!=null&&r.metadata.externalSources.some(t=>Q(t,s))}async function _e(r,e,s){let{metadata:t}=r,{displaySource:o}=t,a=he(o?.source,e,{checkForConversionRequired:T("enable-feature:georeferenced-uploads")}),n=a!=null?Be(a,e,s):t.externalSources.length>0?qe(r,e,s):ze(r,e,s),i=await n;return c(s),r.addExternalSources([i]),r}async function Be(r,e,s){return{source:await we(r,e,s),original:!0,unitConversionDisabled:!0}}async function qe(r,e,s){let t=Pe(e),{externalSources:o}=r.metadata,a=$e(o,e);if(!a)throw new te;let n=w(v.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),i=await we(a,e,{onProgress:n.makeOnProgress("uploadEditSource")});r.addExternalSources([{source:i,original:!0}]);let u=a.reduce((h,{asset:d})=>d instanceof File?h+d.size:h,0),g=n.simulate("serviceAssetsToGlb",ue(u));try{let{source:h,transform:d,origin:l}=await Qe(i,e,t);return r.transform=d,l&&(r.metadata.georeferenced=!0,s?.useAssetOrigin&&(r.vertexSpace.origin=[l.x,l.y,l.z??0],r.spatialReference=l.spatialReference)),{source:h,unitConversionDisabled:!0}}finally{g.remove()}}async function ze(r,e,s){let t=w(v.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),o=Le(r,e,P(y({},s),{onProgress:t.makeOnProgress("meshToAssetBlob")}));return{source:await ye([o],e,P(y({},s),{onProgress:t.makeOnProgress("uploadAssetBlobs")})),extent:r.extent.clone(),original:!0}}async function Le(r,e,s){let t=Pe(e),o=await r.load(s),a=await o.toBinaryGLTF({origin:o.origin,signal:s?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return c(s),{blob:new Blob([a],{type:"model/gltf-binary"}),assetName:`${$()}.glb`,assetType:t}}function $e(r,e){for(let s of r){let t=he(s.source,e);if(t)return t}return null}function he(r,{infoFor3D:e},s={}){if(!r)return null;let{supportedFormats:t,editFormats:o}=e,a=Y(r),n=new Array,i=V(e),u=K(e),g=!1;for(let h of a){let d=He(h,t);if(!d)return null;let{assetType:l}=d;if(s.checkForConversionRequired&&(l===i||l===u))return null;o.includes(l)&&(g=!0),n.push(d)}return g?n:null}function He(r,e){let s=X(r,e);return s?{asset:r,assetType:s}:null}async function we(r,e,s){return ye(r.map(t=>Ge(t,s)),e,s)}async function ye(r,e,s){let t=w(v.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),o=await Je(r,e,P(y({},s),{onProgress:t.makeOnProgress("prepareAssetItems")}));c(s);let a=o.map(({item:i})=>i),{uploadResults:n}=await Ke(a,e,P(y({},s),{onProgress:t.makeOnProgress("uploadAssetItems")}));return c(s),r.map((i,u)=>Ve(o[u],n[u],e))}async function Ge(r,e){let{asset:s,assetType:t}=r;if(s instanceof File)return{blob:s,assetName:s.name,assetType:t};let o=await s.toBlob(e);return c(e),{blob:o,assetName:s.assetName,assetType:t}}async function We(r,e,s){let{blob:t,assetType:o,assetName:a}=r,n=null;try{let i=await ge({data:t,name:a},e.url,s);c(s),n={assetType:o,assetUploadId:i.itemID}}catch(i){_(i),ss().warnOnce(`Service ${e.url} does not support the REST Uploads API.`)}if(!n){let i=await z(t);if(c(s),!i.isBase64)throw new oe;n={assetType:o,assetData:i.data}}if(!n)throw new ae;return{item:n,assetName:a}}function Je(r,e,s){let t=w(r.length,s?.onProgress,"prepareAssetItems");return Promise.all(r.map(async(o,a)=>{let n=We(await o,e,P(y({},s),{onProgress:t.makeOnProgress(a)}));return c(s),n}))}async function Ke(r,e,s){let t=N(s?.onProgress);try{let o=await p(f(e.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(r)},method:"post",responseType:"json"});if(c(s),o.data.uploadResults.length!==r.length)throw new ne(r.length,o.data.uploadResults.length);return o.data}finally{t.remove()}}function Ve(r,e,s){let{success:t}=e;if(!t){let{error:g}=e;throw new ie(r.assetName,g)}let{assetHash:o}=e,{assetName:a,item:{assetType:n}}=r,{infoFor3D:{supportedFormats:i}}=s,u=W(n,i);if(!u)throw new x(n);return new S(a,u,[new E(`${s.parsedUrl.path}/assets/${o}`,o)])}async function Qe(r,e,s){let t=r.map(({assetName:a,parts:n})=>({assetName:a,assetHash:n[0].partHash})),o;try{let a=f(e.parsedUrl.path,"convert3D"),n=e.capabilities?.operations.supportsAsyncConvert3D;o=(await(n?Ze:Ye)(a,{query:{f:"json",assets:JSON.stringify(t),transportType:"esriTransportTypeUrl",targetFormat:s,async:n},responseType:"json",timeout:0})).data}catch{throw new ce}return Xe(e,o)}function Xe(r,e){let s={source:e.assets.map(t=>{let o=G(t.contentType,r.infoFor3D.supportedFormats);if(!o)throw new x(o);return new S(t.assetName,t.contentType,[new E(t.assetURL,t.assetHash)])}),origin:void 0,transform:void 0};if(T("enable-feature:georeferenced-uploads")&&e.transform){if(s.transform=ee(e.transform),e.spatialReference){let t=H.fromJSON(e.spatialReference);s.origin=Z(e.transform,t)}}else s.transform=le(r.spatialReference);return s}function Ye(r,e){return p(r,e)}async function Ze(r,e){let s=(await p(r,e)).data.statusUrl;for(;;){let t=(await p(s,{query:{f:"json"},responseType:"json"})).data;switch(t.status){case"Completed":return p(t.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(t.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await B(rs)}}function es(r){return!!r.infoFor3D&&!!r.url}function Pe({infoFor3D:r}){let e=J(r);if(!e)throw new re;return e}function ss(){return R.getLogger("esri.layers.graphics.sources.support.uploadAssets")}var rs=1e3;export{Us as uploadAssets};
